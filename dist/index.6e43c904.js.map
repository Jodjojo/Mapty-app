{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\n// prettier-ignore\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + ``).slice(-10);\n  clicks = 0\n\n  constructor(coords, distance, duration) {\n    this.coords = coords; //[lat, lng]\n    this.distance = distance; //in Km\n    this.duration = duration; // in minutes\n  }\n\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click(){\n    this.clicks++\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    // this.type = 'cycling';\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    // km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n///////////////////////////\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n  data;\n  constructor() {\n    // get users position\n    this._getPosition();\n    // attach event handlers\n    form.addEventListener(`submit`, this._newWorkout.bind(this));\n\n    inputType.addEventListener(`change`, this._toggleElevationField.bind(this));\n\n    containerWorkouts.addEventListener(`click`, this._moveToPopup.bind(this));\n\n    // Get data from local storage\n    this._getLocalStorage();\n  }\n\n  _getPosition() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert(`Could not get your position`);\n        }\n      );\n    }\n  }\n  _loadMap(position) {\n    {\n      // console.log(position);\n      const { latitude } = position.coords;\n      const { longitude } = position.coords;\n      // console.log(`https://www.google.com/maps/@${latitude},${longitude}`);\n\n      const coords = [latitude, longitude];\n      console.log(this);\n      this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n      //   console.log(map);\n      L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n        attribution:\n          '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n      }).addTo(this.#map);\n\n      //   HANDLING CLICKS ON MAP\n      this.#map.on(`click`, this._showForm.bind(this));\n\n      this.#workouts.forEach(work => this._renderWorkoutMarker(work));\n    }\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove(`hidden`);\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    // Empty inputs\n    // prettier-ignore\n    inputDistance.value = inputDuration.value = inputCadence.value =\n      inputElevation.value = '';\n\n    form.style.display = `none`;\n    form.classList.add(`hidden`);\n    setTimeout(() => (form.style.display = `grid`), 1000);\n  }\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest(`.form__row`).classList.toggle(`form__row--hidden`);\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    // get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n    // If activity is running, create running object\n    if (type === `running`) {\n      const cadence = +inputCadence.value;\n      // check if data is valid\n      if (\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert(`Inputs have to be positive Numbers`);\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n    // if workout is cycling, create cycling object\n    if (type === `cycling`) {\n      const elevation = +inputElevation.value;\n      // check if data is valid\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert(`Inputs have to be positive Numbers`);\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    // add new object to workout array\n    this.#workouts.push(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n    // render workout on list\n    this._renderWorkout(workout);\n\n    // hide form and clear input fields\n    this._hideForm();\n\n    //SET LOCAL STORAGE TO ALL WORKOUTS\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n  }\n  _renderWorkout(workout) {\n    let html = `\n     <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n          }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n\n    if (workout.type === 'cycling')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⛰</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest(`.workout`);\n    // console.log(workoutEl);\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    // console.log(workout);\n\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: { duration: 1 },\n    });\n\n    // USING THE PUBLIC INTEREFACE\n    workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem(`workouts`, JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem(`workouts`));\n    // console.log(data);\n\n    if (!data) return;\n\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => this._renderWorkout(work));\n  }\n\n  reset() {\n    localStorage.removeItem(`workouts`);\n    location.reload();\n  }\n}\n\nconst app = new App();\n\n//2 dice\n//each player plays 1 no hold\n// spins 2 dice\n// automatically applies the score once and then switches roll\n"],"names":["Workout","date","Date","id","now","slice","clicks","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","click","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","map","mapZoomLevel","mapEvent","workouts","data","_getPosition","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","_getLocalStorage","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","console","log","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","workout","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","parse","getItem","reset","removeItem","location","reload","app"],"version":3,"file":"index.6e43c904.js.map"}